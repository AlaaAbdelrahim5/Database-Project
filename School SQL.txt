-- Create Employee table
CREATE TABLE school.Employee (
    UserNum INTEGER NOT NULL PRIMARY KEY,
    Password VARCHAR(20) NOT NULL,
    UserType VARCHAR(7) NOT NULL CHECK (UserType IN ('Admin', 'Teacher'))
);

-- Create Admin table
CREATE TABLE school.Admin (
    AdminID INTEGER NOT NULL PRIMARY KEY,
    FirstName VARCHAR(15) NOT NULL,
    LastName VARCHAR(15) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Gender CHAR(1) NOT NULL CHECK (Gender IN ('M', 'F')),
    Email VARCHAR(35) NOT NULL UNIQUE,
    PhoneNumber VARCHAR(20) NOT NULL UNIQUE,
    Address VARCHAR(50),
    FOREIGN KEY (AdminID) REFERENCES school.Employee (UserNum) ON DELETE CASCADE
);

-- Create Classes table
CREATE TABLE school.Classes (
    ClassID INTEGER NOT NULL PRIMARY KEY,
    GradeLevel INTEGER NOT NULL CHECK (GradeLevel BETWEEN 1 AND 12),
    RoomAlphabet CHAR(1) NOT NULL CHECK (RoomAlphabet BETWEEN 'A' AND 'Z'),
    DesksNumber INTEGER NOT NULL CHECK (DesksNumber BETWEEN 20 AND 50)
);

-- Create Subjects table
CREATE TABLE school.Subjects (
    SubjectName VARCHAR(30) NOT NULL PRIMARY KEY,
    Duration INTEGER NOT NULL CHECK (Duration BETWEEN 20 AND 80),
    Description VARCHAR(100)
);

-- Create Teachers table
CREATE TABLE school.Teachers (
    TeacherID INTEGER NOT NULL PRIMARY KEY,
    FirstName VARCHAR(15) NOT NULL,
    LastName VARCHAR(15) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Gender CHAR(1) NOT NULL CHECK (Gender IN ('M', 'F')),
    Email VARCHAR(35) NOT NULL UNIQUE,
    PhoneNumber VARCHAR(20) NOT NULL UNIQUE,
    Address VARCHAR(50),
    SubjectName VARCHAR(30) NOT NULL,
    FOREIGN KEY (TeacherID) REFERENCES school.Employee (UserNum) ON DELETE CASCADE,
    FOREIGN KEY (SubjectName) REFERENCES school.Subjects (SubjectName) ON DELETE CASCADE
);

-- Create Students table
CREATE TABLE school.Students (
    StudentID INTEGER NOT NULL PRIMARY KEY,
    FirstName VARCHAR(15) NOT NULL,
    MidName VARCHAR(15) NOT NULL,
    LastName VARCHAR(15) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Gender CHAR(1) NOT NULL,
    Address VARCHAR(50) NOT NULL,
    Parents_Phone_num VARCHAR(20) NOT NULL,
    Absences INTEGER DEFAULT 0,
    ClassNum INTEGER NOT NULL,
    Transportation VARCHAR(10) NOT NULL CHECK (Transportation IN ('Pedestrian', 'Bus')),
    CONSTRAINT check_Gender CHECK (Gender IN ('M', 'F')),
    CONSTRAINT class_FK FOREIGN KEY (ClassNum) REFERENCES school.Classes (ClassID) ON DELETE CASCADE
);

-- Create Teaches_At table
CREATE TABLE school.Teaches_At (
    TeacherID INTEGER NOT NULL,
    ClassID INTEGER NOT NULL,
    PRIMARY KEY (TeacherID, ClassID),
    FOREIGN KEY (TeacherID) REFERENCES school.Teachers (TeacherID) ON DELETE CASCADE,
    FOREIGN KEY (ClassID) REFERENCES school.Classes (ClassID) ON DELETE CASCADE
);

-- Create Studies table
CREATE TABLE school.Studies (
    StudentID INTEGER NOT NULL,
    SubjectName VARCHAR(30) NOT NULL,
    First_Exam NUMERIC(3, 1) NOT NULL CHECK (First_Exam BETWEEN 0.0 AND 25.0),
    Second_Exam NUMERIC(3, 1) NOT NULL CHECK (Second_Exam BETWEEN 0.0 AND 25.0),
    Final_Exam NUMERIC(3, 1) NOT NULL CHECK (Final_Exam BETWEEN 0.0 AND 50.0),
    PRIMARY KEY (StudentID, SubjectName),
    FOREIGN KEY (StudentID) REFERENCES school.Students (StudentID) ON DELETE CASCADE,
    FOREIGN KEY (SubjectName) REFERENCES school.Subjects (SubjectName) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION school.update_studies_on_teacher_assignment()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO school.Studies (StudentID, SubjectName, First_Exam, Second_Exam, Final_Exam)
    SELECT s.StudentID, t.SubjectName, 0.0, 0.0, 0.0
    FROM school.Students s
    JOIN school.Teaches_At ta ON s.ClassNum = NEW.ClassID AND ta.TeacherID = NEW.TeacherID
    JOIN school.Teachers t ON ta.TeacherID = t.TeacherID
    WHERE ta.ClassID = NEW.ClassID
    ON CONFLICT (StudentID, SubjectName) DO NOTHING;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create Trigger
CREATE TRIGGER trigger_update_studies
AFTER INSERT ON school.Teaches_At
FOR EACH ROW
EXECUTE FUNCTION school.update_studies_on_teacher_assignment();

CREATE OR REPLACE FUNCTION school.create_studies_on_student_insert()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO school.Studies (StudentID, SubjectName, First_Exam, Second_Exam, Final_Exam)
    SELECT NEW.StudentID, t.SubjectName, 0.0, 0.0, 0.0
    FROM school.Teaches_At ta
    JOIN school.Teachers t ON ta.TeacherID = t.TeacherID
    WHERE ta.ClassID = NEW.ClassNum
    ON CONFLICT (StudentID, SubjectName) DO NOTHING;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_create_studies
AFTER INSERT ON school.Students
FOR EACH ROW
EXECUTE FUNCTION school.create_studies_on_student_insert();

-- Insert statements for school.Employee
INSERT INTO school.Employee (UserNum, Password, UserType)
VALUES
(1, '111', 'Admin'),
(2, '222', 'Teacher'),
(3, '333', 'Teacher'),
(4, '444', 'Teacher'),
(5, '555', 'Teacher'),
(6, '666', 'Admin'),
(7, '777', 'Teacher'),
(8, '888', 'Teacher'),
(9, '999', 'Teacher'),
(10, '111', 'Teacher');

-- Insert statements for school.Admin
INSERT INTO school.Admin (AdminID, FirstName, LastName, DateOfBirth, Gender, Email, PhoneNumber, Address)
VALUES
(1, 'John', 'Doe', '1980-01-01', 'M', 'john.doe@example.com', '111-111-1111', '123 Main St, Cityville, USA'),
(6, 'Emma', 'Smith', '1978-03-15', 'F', 'emma.smith@example.com', '222-222-2222', '456 Oak St, Townsville, USA');

-- Insert statements for school.Classes
INSERT INTO school.Classes (ClassID, GradeLevel, RoomAlphabet, DesksNumber)
VALUES
(1, 10, 'A', 30),
(2, 11, 'B', 25),
(3, 12, 'C', 28),
(4, 10, 'D', 32),
(5, 11, 'E', 27);

-- Insert statements for school.Subjects
INSERT INTO school.Subjects (SubjectName, Duration, Description)
VALUES
('Math', 40, 'Algebra and Geometry'),
('Science', 35, 'Biology and Chemistry'),
('History', 30, 'World History'),
('English', 45, 'Literature and Composition'),
('Physics', 32, 'Classical Mechanics');

-- Insert statements for school.Teachers
INSERT INTO school.Teachers (TeacherID, FirstName, LastName, DateOfBirth, Gender, Email, PhoneNumber, Address, SubjectName)
VALUES
(2, 'Emily', 'Johnson', '1985-02-02', 'F', 'emily.johnson@example.com', '333-333-3333', '789 Pine St, Villageton, USA', 'Math'),
(3, 'Michael', 'Smith', '1995-03-03', 'M', 'michael.smith@example.com', '444-444-4444', '101 Elm St, Hamletville, USA', 'Science'),
(4, 'Jennifer', 'Brown', '2005-04-04', 'F', 'jennifer.brown@example.com', '555-555-5555', '202 Maple St, Riverside, USA', 'History'),
(5, 'David', 'Davis', '2015-05-05', 'M', 'david.davis@example.com', '666-666-6666', '303 Oak St, Hilltop, USA', 'English'),
(7, 'Olivia', 'Miller', '1990-08-20', 'F', 'olivia.miller@example.com', '777-777-7777', '404 Birch St, Lakeside, USA', 'Physics'),
(8, 'James', 'Jones', '1988-06-12', 'M', 'james.jones@example.com', '888-888-8888', '505 Cedar St, Mountainview, USA', 'Math'),
(9, 'Sophia', 'White', '1992-09-25', 'F', 'sophia.white@example.com', '999-999-9999', '606 Pine St, Countryside, USA', 'History'),
(10, 'William', 'Wilson', '1983-11-18', 'M', 'william.wilson@example.com', '000-000-0000', '707 Elm St, Suburbia, USA', 'Science');

-- Insert statements for school.Students
INSERT INTO school.Students (StudentID, FirstName, MidName, LastName, DateOfBirth, Gender, Address, Parents_Phone_num, Absences, ClassNum, Transportation)
VALUES
(1, 'John', 'A', 'Doe', '2005-05-15', 'M', '123 Main St', '123-456-7890', 0, 1, 'Bus'),
(2, 'Jane', 'B', 'Smith', '2004-08-22', 'F', '456 Oak St', '987-654-3210', 0, 2, 'Pedestrian'),
(3, 'Bob', 'C', 'Johnson', '2006-02-10', 'M', '789 Pine St', '555-123-4567', 0, 3, 'Bus'),
(4, 'Alice', 'D', 'Williams', '2005-11-30', 'F', '987 Elm St', '111-222-3333', 0, 1, 'Pedestrian'),
(5, 'Charlie', 'E', 'Brown', '2004-04-05', 'M', '654 Birch St', '444-555-6666', 0, 2, 'Bus');

-- -- Insert statements for school.Teaches_At
-- INSERT INTO school.Teaches_At (TeacherID, ClassID)
-- VALUES
-- (2, 1),
-- (3, 2),
-- (4, 3),
-- (5, 1),
-- (7, 2);
